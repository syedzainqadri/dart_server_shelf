// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-dart"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}



model SystemSettings {
  id       Int       @id @default(autoincrement())
  name     String
  value    String? 
  settingGroup  SettingGroup @default(GENERAL)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemUser {
  id        Int       @id @default(autoincrement())
  username  String
  password  String
  salt      String
  // role      SystemRole  @default(SUPERADMIN)
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  systemUserRole SystemUserRole[]
  systemUserPermissions SystemUserPermissions[]
}

model SystemUserRole {
  id        Int       @id @default(autoincrement())
  title     String
  systemUser SystemUser[]
}

model SystemActivityLog {
  id           Int       @id @default(autoincrement())
  refrenceId   Int
  refrenceFrom RefrenceFrom @default(PRODUCT)
  activity  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RefrenceFrom {
  PRODUCT
  ORDER
  PROJECT
  USER
  POST
}

model SystemUserPermissions{
  id  Int @id @default(autoincrement())
  canView Boolean
  canAdd Boolean
  canEdit Boolean
  canDelete Boolean
  hasFullAccess Boolean
  // TODO; need to do some more discussion
  allowedProject String?
  allowedCity String?
  allowedAgency String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  systemUser SystemUser  @relation(fields: [systemUserId], references: [id])
  systemUserId Int
  systemModule SystemModule @relation(fields: [systemModuleId], references: [id])
  systemModuleId Int
}

model SystemModule {
  id        Int       @id @default(autoincrement())
  parentId  Int
  title String
  sortOrder Int
  systemUserPermissions SystemUserPermissions[]
}

model Agency {
  id       Int       @id @default(autoincrement())
  title    String
  featuredImage String?
  logoImage String?
  ownerName String?
  country String? @default("Pakistan")
  state String?
  city String?
  email String?
  address String?
  description String?
  propertyType String?
  purpose String?
  mobile String?
  status Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users         Users?  @relation(fields: [userId], references: [id])
  userId       Int?
  slug   Slug @relation(fields: [slugId], references: [id])
  slugId Int  @unique
}
// developer and project schema started
model Developer {
  id       Int       @id @default(autoincrement())
  title    String
  description    String
  logo      String
  status    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projects Project[]
}

model Project {
  id        Int       @id @default(autoincrement())
  title     String
  address   String
  description String?
  featuredImage String? @db.VarChar(2000)
  gallery   String? @db.VarChar(2000)
  locality  String?
  area      String?
  city      String?
  startingPrice     String?
  endingPrice     String?
  walkthroughThreeD String? //iframe
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  developer Developer?  @relation(fields: [developerId], references: [id])
  developerId Int?
  category Category?  @relation(fields: [categoryId], references: [id])
  categoryId Int?
  projectNearByPlaceNames String?
  projectNearByPlaceIcons String?
  floorplans  FloorPlan[]
  status Boolean?
}

model FloorPlan {
  id        Int       @id @default(autoincrement())
  title     String
  floorPlanPath String
  project Project?  @relation(fields: [projectId], references: [id])
  projectId Int?
}

model ProjectNearByPlace {
  id          Int      @id @default(autoincrement())
  name        String @unique
  icon String? @db.VarChar(800)
  status   Boolean  @default(false)
}

model Product {
  id       Int       @id @default(autoincrement())
  title String
  price Float
  salePrice Float
  productType ProductType @default(STANDARD)
  description String?
  productLifeInDays Int @default(7)
  status Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderProduct OrderProduct[]
}

model Order {
  id  Int       @id @default(autoincrement())
  orderAmount Float
  user         Users  @relation(fields: [userId], references: [id])
  userId       Int
  // paymentMethod PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderProduct OrderProduct[]
}

model PaymentMethod {
  id  Int       @id @default(autoincrement())
  name String
  apiKey String
  secret String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status Boolean @default(false)
  // order Order
}

model OrderProduct {
  id  Int @id @default(autoincrement())
  price Float
  isProductUsed Boolean @default(false)
  productActiveDate DateTime?
  productExpireDate DateTime?
  product Product  @relation(fields: [productId], references: [id])
  productId Int
  order Order  @relation(fields: [orderId], references: [id])
  orderId Int
  post Post?  @relation(fields: [postId], references: [id])
  postId Int?
}

// developer and project schema end
model Users {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  role     Role      @default(USER) // need to create table
  password String?
  fcmtoken String?  @default("")
  salt     String?
  preferencesEmailNotification Boolean @default(false)
  preferencesNewsletter Boolean @default(false)
  preferencesAutomatedReport Boolean @default(false)
  currency String @default("PKR")
  AreaUnit AreaSizeUnit @default(SQFT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts    Post[]
  Profile  Profile[] @relation("userProfile")
  reviews Review[]
  wishlists Wishlist[]
  formPosts ForumPost[]
  formPostComments ForumPostComment[]
  postComments PostComment[]
  blogs Blog[]
  agency Agency[]
  order Order[]
}

model Profile {
  id           Int     @id @default(autoincrement())
  firstName    String?
  lastName     String?
  addressLine1 String?
  addressLine2 String?
  city         String?
  state        String?
  country      String?
  postCode     String?
  phone        String?
  slug         String? @unique
  images       String?
  longitude    String?
  latitude     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  status    Boolean @default(false)
  user         Users?  @relation("userProfile", fields: [userId], references: [id])
  postContact  PostContact?  @relation(fields: [postContactId], references: [id])
  postContactId    Int? 
  userId       Int?   @unique
}

model Post {
  id               Int        @id @default(autoincrement())
  title            String
  propertyNumber   Int?    @unique
  description      String? @db.VarChar(800)
  featuredImages   String? @db.VarChar(2000)
  galleryImages    String? @db.VarChar(2000)
  video            String
  longDescription  String? @db.VarChar(2000)
  longitude        String?
  latitude         String?
  plotNumber       String?
  price            String?
  city             String?
  area             String?
  purpose          Purpose? @default(SELL)
  amenitiesNames String
  amenitiesIconCodes String
  isInstallmentAvailable  Boolean? @default(false)
  showContactDetails  Boolean? @default(false)
  advanceAmount    String
  noOfInstallments Int
  monthlyInstallments String
  readyForPossession  Boolean? @default(false)
  areaSizeUnit     AreaSizeUnit? @default(MARLA)
  totalAreaSize String
  bedroooms        Int
  bathroom         Int
  postmeta         PostMeta[]
  category         Category    @relation(fields: [categoryId], references: [id])
  categoryId       Int
  subCategoryId    Int?
  author           Users       @relation(fields: [authorId], references: [id])
  authorId         Int
  review           Review[]
  wishlist         Wishlist[]
  postComment      PostComment[]
  orderProduct     OrderProduct[]
  slug   Slug? @relation(fields: [slugId], references: [id])
  slugId Int? 
  status  Boolean @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model PostContact {
  id       Int       @id @default(autoincrement())
  name  String?
  email String?
  phone String?
  landLine String?
  ccontactPersonType  CcontactPersonType @default(BUYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // post  Post[]
  profile Profile[]
}

model Review {
  id    Int       @id @default(autoincrement())
  rating  Float?
  message String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user  Users    @relation(fields: [userId], references: [id])
  userId Int
  post  Post    @relation(fields: [postId], references: [id])
  postId Int
}

model PostComment {
  id        Int       @id @default(autoincrement())
  postReplyTitle String
  postReplyDescription String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  post Post @relation(fields: [postId], references: [id])
  postId Int
  user      Users @relation(fields: [userId], references: [id])
  userId    Int
}

model Wishlist {
  id    Int       @id @default(autoincrement())
  post  Post    @relation(fields: [postId], references: [id])
  postId Int
  user  Users    @relation(fields: [userId], references: [id])
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PostMeta {
  id               Int     @id @default(autoincrement())
  metaTitle        String
  metaDescription  String?
  status        Boolean @default(false)
  post             Post    @relation(fields: [postId], references: [id])
  postId           Int
}

model Amenities {
  id          Int      @id @default(autoincrement())
  name        String @unique
  icon String? @db.VarChar(800)
  status   Boolean  @default(false)
}

model Category {
  id          Int         @id @default(autoincrement())
  name        String
  slug        String?     @unique
  description String?
  image       String?     @db.VarChar(800)
  parentId    Int?
  status   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  amenitiesNames String
  amenitiesIconCodes String
  posts       Post[]
  projects    Project[]
}


model Blog {
  id          Int         @id @default(autoincrement())
  title       String
  content     String?
  featuredImage String?
  createdAt   DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  status      Boolean   @default(false)
  blogCategory        BlogCategory      @relation(fields: [blogCategoryId], references: [id])
  blogCategoryId      Int
  slug   Slug @relation(fields: [slugId], references: [id])
  slugId Int  @unique
  author           Users       @relation(fields: [authorId], references: [id])
  authorId         Int
}

model BlogCategory {
  id          Int         @id @default(autoincrement())
  title       String
  content     String?
  iconImage   String?
  image       String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  blogs       Blog[]
}

model Page{
  id          Int         @id @default(autoincrement())
  title       String
  content     String?
  featuredImage String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      Boolean   @default(false)
  slug   Slug @relation(fields: [slugId], references: [id])
  slugId Int  @unique
}

model Slug {
  id        Int       @id @default(autoincrement())
  slug      String    @unique
  type      SlugType  @default(POST)    // Save the postID / pageID / 
  pages Page[]
  blogs Blog[]
  posts Post[]
  agency Agency[]
  formPost ForumPost[]
}

model ForumPost {
  id        Int       @id @default(autoincrement())
  postTitle String
  postType  ForumPostType @default(GENERAL)
  postDescription String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  forumPostReply ForumPostComment[]
  user           Users       @relation(fields: [userId], references: [id])
  userId         Int
  slug   Slug @relation(fields: [slugId], references: [id])
  slugId Int  @unique
}

model ForumPostComment {
  id        Int       @id @default(autoincrement())
  postReplyTitle String
  postReplyDescription String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  forumPost ForumPost @relation(fields: [forumPostId], references: [id])
  forumPostId Int
  user           Users       @relation(fields: [userId], references: [id])
  userId         Int

}

model FaqGroup {
  id        Int       @id @default(autoincrement())
  faqGroupName String
  sortOrder Int
  status Boolean @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  faqQuestionAnswer FaqQuestionAnswer[]
}

model FaqQuestionAnswer {
  id  Int @id @default(autoincrement())
  qusestion String
  answer String
  sortOrder Int
  status Boolean @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  faqGroup  FaqGroup  @relation(fields: [faqGroupId], references: [id])
  faqGroupId  Int
}

enum ForumStatus {
  PENDING
  CANCEL
  DELETE
}

enum ForumPostType {
  GENERAL
  DOCUMENTS
  CLEARANCE
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
  AREAMANAGER
  SALESMANAGER
  MANAGER
  MARKETER
  AGENCY
}

enum SellPurpose {
  SELL
  RENT
}

enum SlugType {
  POST
  POSTCATEGORY
  PAGE
  BLOG
  BLOGCATEGORY
  AGENCY
  FORUMPOST
}

// enum SystemRole {
//   SUPERADMIN
//   ADMIN
//   AREAMANAGER
//   SALESMANAGER
//   MANAGER
//   MARKETER
// }

enum SettingGroup {
  GENERAL
  EMAIL
  BRANDING
  SEO
}

// enum PostStatus {
//   DRAFT
//   PUBLISH
//   PENDING
//   DELETED
// }

enum AreaSizeUnit {
  MARLA
  SQFT
  SQMT
}

enum Purpose {
  SELL
  RENT
}

enum CcontactPersonType {
  BUYER
  AGENT
  OTHER
  SELLER
  USER
}

enum CommonStatus {
  ACTIVE
  INACTIVE
}

enum ProductType {
  HOT
  FEATURED
  TOP
  BUMPED
  STANDARD
}

//TODO: add post type
//TODO: add postContact relation to profile
//TODO: complete roles
//TODO: add customer api